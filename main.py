import logging
import asyncio

from aiogram import Bot, Dispatcher
from aiogram.types import BotCommand

from config import BOT_TOKEN
from app.handlers import routers, youtube

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger("BOT")


async def set_commands(bot):
    commands = [
        BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"),
        BotCommand(command="privacy", description="–ü–æ–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"),
        BotCommand(command="feedback", description="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"),
    ]
    await bot.set_my_commands(commands)


async def main():
    logger.info("üü¢ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    if not BOT_TOKEN or not isinstance(BOT_TOKEN, str):
        logger.critical("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")
        return
    try:
        bot = Bot(token=BOT_TOKEN)
        dp = Dispatcher()
        dp.include_routers(routers.router, youtube.router)
        await set_commands(bot)
        logger.info("üîÑ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        raise
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())