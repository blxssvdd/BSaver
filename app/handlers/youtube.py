import os
import logging
import tempfile
import time
import subprocess

from aiogram import Router, F
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.exceptions import TelegramEntityTooLarge

from app.services.youtube_service import YouTubeService


router = Router()
logger = logging.getLogger("YOUTUBE_HANDLER")

STANDARD_QUALITIES = ['144p', '240p', '360p', '480p', '720p']

def build_formats_keyboard(formats):
    video_formats = {f"{f.get('height')}p": f for f in formats.get('video', []) if f.get('height') and f.get('height') <= 720}
    keyboard = []
    row = []
    for quality in ['144p', '240p', '360p', '480p', '720p']:
        fmt = video_formats.get(quality)
        if fmt:
            row.append(InlineKeyboardButton(text=quality, callback_data=f"ytvideo_{fmt['format_id']}"))
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton(text="üéµ MP3", callback_data="ytaudio_mp3")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def build_formats_text(formats):
    video_formats = {f"{f.get('height')}p": f for f in formats.get('video', []) if f.get('height') and f.get('height') <= 720}
    available = []
    for quality in ['144p', '240p', '360p', '480p', '720p']:
        fmt = video_formats.get(quality)
        if fmt:
            size_mb = int(fmt.get('filesize', 0) or fmt.get('filesize_approx', 0) or 0) // (1024 * 1024)
            size_str = f"{size_mb} –ú–ë" if size_mb else "? –ú–ë"
            available.append(f"{quality} ({size_str})")
    return ', '.join(available)

def build_video_info_message(info, formats):
    title = info.get('title', 'YouTube Video')
    uploader = info.get('uploader', 'Unknown')
    uploader_url = info.get('uploader_url') or info.get('channel_url')
    duration = info.get('duration', 0)
    minutes = duration // 60
    seconds = duration % 60
    qualities = [
        ('144p', 'üöÄ'),
        ('240p', 'üöÄ'),
        ('360p', 'üöÄ'),
        ('480p', '‚ö°Ô∏è'),
        ('720p', '‚ö°Ô∏è'),
    ]
    video_formats = {f"{f.get('height')}p": f for f in formats.get('video', []) if f.get('height') and f.get('height') <= 720}
    lines = []
    for q, emoji in qualities:
        fmt = video_formats.get(q)
        if fmt:
            size = int(fmt.get('filesize', 0) or fmt.get('filesize_approx', 0) or 0)
            size_mb = f"{size // (1024 * 1024)}MB" if size else "?MB"
            lines.append(f"{emoji} {q}: {size_mb}")
    lines_str = '\n'.join(lines)
    if uploader_url:
        uploader_line = f'üë§ <a href="{uploader_url}">{uploader}</a>'
    else:
        uploader_line = f'üë§ {uploader}'
    msg = (
        f"<b>{title}</b>\n"
        f"{uploader_line}\n"
        f"‚è± {minutes}:{seconds:02d}\n\n"
        f"{lines_str}\n\n"
        f"<i>–§–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ‚Üì</i>"
    )
    return msg

def reencode_mp4_for_telegram(input_path, output_path):
    cmd = [
        'ffmpeg', '-y', '-i', input_path,
        '-c:v', 'libx264', '-preset', 'fast', '-profile:v', 'main', '-level', '3.1',
        '-c:a', 'aac', '-b:a', '128k',
        '-movflags', '+faststart',
        output_path
    ]
    subprocess.run(cmd, capture_output=True)

@router.message(F.text.contains("youtube.com") | F.text.contains("youtu.be"))
async def handle_youtube(message: Message):
    url = message.text
    try:
        wait_msg = await message.reply("üëÄ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ...")
        info = await YouTubeService.get_video_info(url)
        if not info or not info.get('formats'):
            await wait_msg.delete()
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")
            return
        formats = YouTubeService.extract_video_audio_formats(info['formats'])
        video_formats = {f"{f.get('height')}p": f for f in formats.get('video', []) if f.get('height')}
        if not video_formats:
            await wait_msg.delete()
            await message.reply("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∏–¥–µ–æ-—Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
            return
        msg = build_video_info_message(info, formats)
        kb = build_formats_keyboard(formats)
        thumbnail = info.get('thumbnail')
        if thumbnail:
            await message.reply_photo(thumbnail, caption=msg, reply_markup=kb, parse_mode="HTML")
        else:
            await message.reply(msg, reply_markup=kb, parse_mode="HTML")
        await wait_msg.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ YouTube: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.callback_query(F.data.startswith("ytvideo_"))
async def process_video_format(callback: CallbackQuery):
    msg = getattr(callback, 'message', None)
    url = None
    if msg is not None:
        reply_msg = getattr(msg, 'reply_to_message', None)
        if reply_msg is not None and getattr(reply_msg, 'text', None):
            url = reply_msg.text
        elif hasattr(msg, 'caption') and msg.caption:
            url = msg.caption.split('\n')[0]
    data = getattr(callback, 'data', None)
    if not url or not isinstance(url, str) or not data or not isinstance(data, str) or not data.startswith("ytvideo_"):
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.", show_alert=True)
        return
    url = str(url)
    format_id = data.replace("ytvideo_", "")
    await callback.answer("–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")
    info = await YouTubeService.get_video_info(url)
    if not info:
        if msg:
            await msg.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ.")
        return
    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as f:
        temp_path = f.name
    success = await YouTubeService.download_format(url, format_id, temp_path)
    if not success:
        if msg:
            await msg.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.")
        if os.path.exists(temp_path):
            os.remove(temp_path)
        return
    file_size = os.path.getsize(temp_path)
    if file_size == 0:
        if msg:
            await msg.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ: —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É.")
        if os.path.exists(temp_path):
            os.remove(temp_path)
        return
    tg_limit = 2 * 1024 * 1024 * 1024
    if file_size > tg_limit:
        if msg:
            await msg.reply("‚ùóÔ∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram (–±–æ–ª—å—à–µ 2 –ì–ë).\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–Ω–∏–∂–µ!")
        if os.path.exists(temp_path):
            os.remove(temp_path)
        return
    title = info.get('title', 'YouTube Video')
    if msg:
        try:
            logger.info(f"–ü—Ä–æ–±—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ: {temp_path}, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
            try:
                with open(temp_path, 'rb') as f:
                    f.read(1024)
                logger.info("–§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è")
            except Exception as e:
                logger.error(f"–§–∞–π–ª –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è: {e}")
            await msg.reply_video(FSInputFile(temp_path, filename=f"{title[:50]}.mp4"), caption=f"–ì–æ—Ç–æ–≤–æ! {title}")
            logger.info("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        except TelegramEntityTooLarge:
            logger.warning("TelegramEntityTooLarge: –ø—Ä–æ–±—É—é –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª")
            recoded_path = temp_path.replace('.mp4', '_tg.mp4')
            reencode_mp4_for_telegram(temp_path, recoded_path)
            try:
                await msg.reply_video(FSInputFile(recoded_path, filename=f"{title[:50]}_tg.mp4"), caption=f"–ì–æ—Ç–æ–≤–æ! {title}\n(–ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Telegram)")
                logger.info("–ü–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            except TelegramEntityTooLarge:
                logger.error("TelegramEntityTooLarge –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
                await msg.reply("‚ùóÔ∏è –§–∞–π–ª –Ω–µ –ø—Ä–∏–Ω—è—Ç Telegram –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ä–æ–ª–∏–∫ –∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
                await msg.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            finally:
                if os.path.exists(recoded_path):
                    try:
                        os.remove(recoded_path)
                    except Exception:
                        pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
            await msg.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
    if os.path.exists(temp_path):
        try:
            os.remove(temp_path)
        except PermissionError:
            time.sleep(1)
            try:
                os.remove(temp_path)
            except Exception:
                pass

@router.callback_query(F.data == "ytaudio_mp3")
async def process_audio_mp3(callback: CallbackQuery):
    msg = getattr(callback, 'message', None)
    url = None
    if msg is not None:
        reply_msg = getattr(msg, 'reply_to_message', None)
        if reply_msg is not None and getattr(reply_msg, 'text', None):
            url = reply_msg.text
        elif hasattr(msg, 'caption') and msg.caption:
            url = msg.caption.split('\n')[0]
    if not url or not isinstance(url, str):
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.", show_alert=True)
        return
    url = str(url)
    await callback.answer("–°–∫–∞—á–∏–≤–∞—é MP3...")
    info = await YouTubeService.get_video_info(url)
    if not info:
        if msg:
            await msg.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ.")
        return
    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as f:
        temp_path = f.name
    success = await YouTubeService.download_audio_mp3(url, temp_path)
    if not success:
        if msg:
            await msg.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å MP3.")
        if os.path.exists(temp_path):
            os.remove(temp_path)
        return
    file_size = os.path.getsize(temp_path)
    if file_size == 0:
        if msg:
            await msg.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å MP3: —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É.")
        if os.path.exists(temp_path):
            os.remove(temp_path)
        return
    tg_limit = 2 * 1024 * 1024 * 1024
    if file_size > tg_limit:
        if msg:
            await msg.reply("‚ùóÔ∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram (–±–æ–ª—å—à–µ 2 –ì–ë).\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–Ω–∏–∂–µ!")
        if os.path.exists(temp_path):
            os.remove(temp_path)
        return
    title = info.get('title', 'YouTube Audio')
    duration = info.get('duration', 0)
    minutes = duration // 60
    seconds = duration % 60
    if msg:
        try:
            await msg.reply_audio(
                FSInputFile(temp_path, filename=f"{title[:50]}.mp3"),
                caption=f"–ì–æ—Ç–æ–≤–æ! {title}\n‚è± {minutes}:{seconds:02d}"
            )
        except TelegramEntityTooLarge:
            await msg.reply("‚ùóÔ∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞).\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–Ω–∏–∂–µ!")
        except Exception as e:
            await msg.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
    if os.path.exists(temp_path):
        try:
            os.remove(temp_path)
        except PermissionError:
            time.sleep(1)
            try:
                os.remove(temp_path)
            except Exception:
                pass